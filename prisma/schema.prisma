// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String?
  name      String?
  role      String     @default("user")
  wishlists Wishlist[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Assets {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  priceRent    Int?
  priceSale    Int?
  location     String
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int
  ownerName    String
  ownerContact String
  images       Image[]
  wishlists    Wishlist[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  assets     Assets   @relation(fields: [assetsId], references: [id], onDelete: Cascade)
  assetsId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  assets    Assets[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  assets    Assets   @relation(fields: [assetsId], references: [id], onDelete: Cascade)
  assetsId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
